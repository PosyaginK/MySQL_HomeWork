/*Урок 5*/
/*Пусть в таблице users поля created_at и updated_at оказались незаполненными. 
 * Заполните их текущими датой и временем.*/
/*Во первых добавим к себе в таблицу такие столбцы*/
ALTER TABLE users ADD COLUMN created_at DATETIME DEFAULT NOW();
ALTER TABLE users ADD COLUMN updated_at DATETIME DEFAULT NOW();
/*Удалим значения в столбцах created_at и updated_at у первых 9 ползователей*/

UPDATE `users`
SET created_at = NULL, users.updated_at = NULL
WHERE id < 10;

/*Заполним пустые поля текущими датой и временем*/
UPDATE users
SET created_at = NOW(),updated_at = NOW()
WHERE created_at is NULL AND updated_at is NULL;

/*Таблица users была неудачно спроектирована. 
 * Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате "20.10.2017 8:10". 
 * Необходимо преобразовать поля к типу DATETIME, сохранив введеные ранее значения.*/
ALTER TABLE users DROP COLUMN created_at;
ALTER TABLE users DROP COLUMN updated_at;
/*Создаем колонки created_at и updated_at с типом VARCHAR*/

ALTER TABLE users ADD COLUMN created_at VARCHAR(255);
ALTER TABLE users ADD COLUMN updated_at VARCHAR(255);

/*Добавим данные текстом*/

UPDATE `users`
SET created_at = '07.01.2016 12:05', updated_at = '07.01.2016 12:05'
WHERE id = 1;

UPDATE `users`
SET created_at = '20.05.2016 16:32', updated_at = '20.05.2016 16:32'
WHERE id = 2;

UPDATE `users`
SET created_at = '14.08.2016 20:10', updated_at = '14.08.2016 20:10'
WHERE id = 3;

UPDATE `users`
SET created_at = '21.10.2016 9:14', updated_at = '21.10.2016 9:14'
WHERE id = 4;

UPDATE `users`
SET created_at = '15.12.2016 12:45', updated_at = '15.12.2016 12:45'
WHERE id = 5;

/*Меняем строку на дату*/
UPDATE `users`
SET created_at = STR_TO_DATE(created_at, '%d.%m.%Y %H:%i'), updated_at = STR_TO_DATE(updated_at, '%d.%m.%Y %H:%i');
/*И меняем тип данных в столбцах*/
ALTER TABLE users MODIFY created_at DATETIME, MODIFY updated_at DATETIME;

-- В таблице складских запасов storehouses_products в поле value могут встречаться самые
-- разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы.
-- Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения
-- значения value. Однако, нулевые запасы должны выводиться в конце, после всех записей.

USE example;
DROP TABLE IF EXISTS storehouses_products;
CREATE TABLE storehouses_products (
  id SERIAL PRIMARY KEY,
  storehouse_id INT UNSIGNED,
  product_id INT UNSIGNED,
  value INT UNSIGNED COMMENT 'Запас товарной позиции на складе',
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) COMMENT = 'Запасы на складе';

INSERT INTO
  storehouses_products (storehouse_id, product_id, value)
VALUES
  (1, 543, 0),
  (1, 789, 2500),
  (1, 3432, 0),
  (1, 826, 30),
  (1, 719, 500),
  (1, 638, 1);
 
/*Выводим строки в порядке увеличения value, нулевые значения в конце*/
SELECT * FROM `storehouses_products`
ORDER BY CASE WHEN value = 0 THEN 2 ELSE 1 END, value 
;

/*
(по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); 
Отсортируйте записи в порядке, заданном в списке IN.*/\
DROP TABLE IF EXISTS `catalog`;
CREATE TABLE `catalog`(
	id SERIAL,
	products VARCHAR(255),
	created_at DATETIME DEFAULT NOW()
);

INSERT INTO `catalog` (products)
VALUES ('mts'),('beeline'),('megaphon'),('tele2'),('yota'),('utel');

SELECT * FROM `catalog`
WHERE id IN (5, 1, 2)
ORDER BY CASE WHEN id = 5 THEN 1 WHEN id = 2 THEN 3 ELSE 2 END, id;


/* АГРЕГАЦИЯ ДАННЫХ*/

/* 1. Подсчитайте средний возраст пользователей в таблице users*/
USE example;

DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
	id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	fname VARCHAR(100),
	lname VARCHAR(100),
	b_day DATE
);

INSERT INTO `users`
VALUES
(NULL, 'Mike', 'Tyson', '1970-03-05'),(NULL, 'Coby', 'Brayant', '97-02-17'), (NULL, 'Jimmy', 'Bekkon', '1988-02-15'), (NULL, 'Leo', 'Tiger', '2003-10-10'),
(NULL, 'Sofi', 'Chacha', '2004-07-12'), (NULL, 'Terry', 'Pratchet', '1955-05-25'), (NULL, 'Gorge', 'Loco', '1965-12-12');

SELECT ROUND(AVG(TIMESTAMPDIFF(YEAR, b_day, NOW())),0) FROM `users`;

/* 2. Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. 
 *Следует учесть, что необходимы дни недели текущего года, а не года рождения.*/
USE example;

/*Создам новую таблицу с данными о днях недели, когда у пользователей день рождение*/
DROP TABLE IF EXISTS `user_bday`;
CREATE TABLE `user_bday`(
	id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
	fname VARCHAR(100),
	lname VARCHAR(100),
	b_day DATE,
	daynames VARCHAR(100)
);

/*Вывожу столбец dayname, чтобы посмотреть в какой день недели будет день рождение у каждого пользователя в этом году*/

SELECT *, 
ROUND(TIMESTAMPDIFF(YEAR, b_day, NOW()),0) as age, -- Возраст пользователя
DATE_ADD(b_day, INTERVAL ROUND(TIMESTAMPDIFF(YEAR, b_day, '2021-12-31'),0) YEAR) as thisyear, -- День рождения в этом году
WEEKDAY(DATE_ADD(b_day, INTERVAL ROUND(TIMESTAMPDIFF(YEAR, b_day, '2021-12-31'),0) YEAR)) as day, -- День недели числом
DAYNAME(DATE_ADD(b_day, INTERVAL ROUND(TIMESTAMPDIFF(YEAR, b_day, '2021-12-31'),0) YEAR)) as dayname -- Название дня недели
FROM `users`; 

/*Заполняю таблицу `user_bday`, вставляю день недели, полученный в предыдущем запросе*/ 
INSERT INTO `user_bday`
VALUES 
(NULL, 'Mike', 'Tyson', '1970-03-05','Friday'),
(NULL, 'Coby', 'Brayant', '1997-02-17', 'Wednesday'), 
(NULL, 'Jimmy', 'Bekkon', '1988-02-15', 'Monday'), 
(NULL, 'Leo', 'Tiger', '2003-10-10', 'Sunday'),
(NULL, 'Sofi', 'Chacha', '2004-07-12', 'Monday'), 
(NULL, 'Terry', 'Pratchet', '1955-05-25', 'Tuesday'), 
(NULL, 'Gorge', 'Loco', '1965-12-12', 'Sunday')
;

/* Вывожу дни недели и количество дней рождений в этот день (в порядке убывания)*/

SELECT DISTINCT daynames, COUNT(*) as counts FROM user_bday GROUP BY daynames ORDER BY counts DESC;

/* 3. (по желанию) Подсчитайте произведение чисел в столбце таблицы*/

DROP TABLE IF EXISTS `numbers`;
CREATE TABLE `numbers` (
	numb BIGINT
);

INSERT INTO `numbers`
VALUES 
(4),(6),(17),(88),(103);

SELECT ROUND(exp(sum(ln(numb))),0) FROM `numbers`; 
